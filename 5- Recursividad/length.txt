fun {Length Xs}
	case Xs
		of nil then 0
		[] X|Xr then 1+{Length Xr}
	end
end


proc {Length Xs ?len}
	case Xs
		of nill then 0
		[] X|Xr then
			local Z in 
				{Length Xr Z}
				len = Z + 1
			end
	end
end


%TAIL RECURSIVE

proc {Length Xs acumm ?len}
	case Xs 
		of X|Xr then	
			local Z in
				Z = 1 + acumm
				{Length Xr Z len}
			end
	else
		len = acumm
	end
end

%Las ventajas que tiene utilizar el tail recursive se basa en poseer un stack final más bajo.
%Esto se debe a que el garbage collector libera la memoria antes ya que primero se realizan los cálculos
% y luego la llamada a la recursión.



