proc { List }
	local Dictionary NewDicc Get Put Domain ProcList in
		fun {NewDic} nil end
		
		fun {Get Ds Key}
			case Ds of nil then
				0
			[] node(key:Key, freq:Freq) then 
				@Freq
			else
				if Key < Ds.key then
					{Get Ds.left Key}
				else {Get Ds.right Key} end
			end
		end

		fun {Put Ds Key Val}
			case Ds of nil then
				Ds = node(key:K, frec:{NewCell Val})
			[] node(key:Key, freq:Freq) then
				Freq := Val 
			else
				if Key < Ds.key then 
					{Put Ds.left Key Val}
				else 
					{Put Ds.right Key Val} 
				end
			end
		end

		fun {Equals Ds}
			local L SortByFrequency in
				fun {SortByFrequency X Y}
					if X.2 <= Y.2 then
						X.1 < Y.1
					else X.1 > Y.1 end
				end
				L = {Map Ds fun {$ K#V} K#V end}
				{Sort L SortByFrequency}
			end
		end
		in
			dictionary(new:NewDic, put:Put, get:Get, equals:Equals)
		end

		fun {ProcList Ds List}
			case List of H|T then 
				Ds = {Put Ds H {Get Ds H} + 1}
				{ProcList Ds T}
			end
		end

		Dic = {NewDic}

		{ProcList Dic List}

		{Browse {Equals Dic}}
	end
end
